import cv2
import numpy as np
import time
import csv
from pathlib import Path

import robomaster
from robomaster import robot
from robomaster import vision

# ===================== Config (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) =====================
# ====== Template mask paths ======
TEMPLATE_PATHS = [
    r"C:\Users\snpdp\Desktop\AIE 2_1\Robot\Aj_Rattachai\Vision_and_Image_processing\Lab6_Visual_PID_Controllor\template\Screenshot 2025-09-12 174407.png",
]

# ====== Detection params ======
SCALES = [0.70, 0.80, 0.90, 1.00, 1.10, 1.20, 1.30]   # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ scale ‡∏Ç‡∏≠‡∏á template ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ/‡πÑ‡∏Å‡∏•
SCORE_THRESH = 0.35                                   # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏≤‡∏Å template (‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏π‡∏á‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î)
MASK_FLOOR_Y = None                                     # ‡∏õ‡∏¥‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û (‡∏û‡∏£‡∏°/‡∏û‡∏∑‡πâ‡∏ô) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏ö‡∏Å‡∏ß‡∏ô

# ====== Smoothing / EMA ======
USE_EMA = True                                         # ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ EMA ‡πÉ‡∏´‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏ô‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
EMA_ALPHA = 0.35                                       # ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å EMA (‡∏™‡∏π‡∏á = ‡∏ï‡∏≤‡∏°‡πÑ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏ô‡∏¥‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á)

# ====== Fallback flags ======
USE_BLOB_FALLBACK = False                               # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á marker/template ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡πâ‡∏≠‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î
MIN_BLOB_AREA = 800                                    # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á blob ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö

# ====== Template matching method ======
MATCH_METHOD = 'CCORR'  # 'CCORR' or 'CCOEFF'
# ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏£‡∏á‡∏ä‡∏±‡∏î‡πÜ ‡πÉ‡∏ä‡πâ mask 0/255 ‚Üí ‡∏•‡∏≠‡∏á CCORR ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
# ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏´‡∏•‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏â‡∏≤‡∏Å‡∏™‡∏ß‡πà‡∏≤‡∏á/‡πÅ‡∏™‡∏á‡πÅ‡∏Å‡∏ß‡πà‡∏á ‚Üí ‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô CCOEFF

# ====== HSV ranges (‡∏™‡∏µ‡πÅ‡∏î‡∏á) ======
HSV_LOWER1 = (0,   30, 40)
HSV_UPPER1 = (12, 255,255)
HSV_LOWER2 = (165, 30, 40)
HSV_UPPER2 = (180,255,255)

# ====== PID params ======
KP_YAW,   KI_YAW,   KD_YAW   = 0.18, 0.0001, 0.01     # yaw ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ PID
KP_PITCH, KI_PITCH, KD_PITCH = 0.18, 0.0001, 0.01     # pitch ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ PID
SIGN_YAW, SIGN_PITCH = +1, -1                          # ‡∏ó‡∏¥‡∏®‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ match ‡∏Å‡∏±‡∏ö ep_gimbal.drive_speed 
MAX_SPEED = 250.0                                      # deg/s ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß gimbal
INT_CLAMP = 30000.0                                    # anti-windup ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏¥‡∏ô‡∏ó‡∏¥‡∏Å‡∏£‡∏±‡∏•

# ====== Misc ======
W, H = 1280, 720                                       # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°
CENTER_X, CENTER_Y = W/2, H/2                          # ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û (‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•)

# ‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏• (‡∏à‡∏≤‡∏Å callback)  pitch, yaw, pitch_ground, yaw_ground
gimbal_angles = [0.0, 0.0, 0.0, 0.0]

# ===================== Utils =====================
def clamp(x, lo, hi):
    return lo if x < lo else hi if x > hi else x

def _load_masks_from_paths(paths): # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ template masks
    masks = []
    for p in paths:
        img = cv2.imread(p, cv2.IMREAD_GRAYSCALE) # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
        # ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô binary 0/255
        _, binm = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY_INV)
        masks.append(binm)
    return masks

def _match_method_const(): # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ flag ‡πÉ‡∏´‡πâ cv2.matchTemplate
    return cv2.TM_CCORR_NORMED if MATCH_METHOD.upper() == 'CCORR' else cv2.TM_CCOEFF_NORMED

def red_mask_binarize(bgr, floor_y=MASK_FLOOR_Y):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á binary mask ‡πÇ‡∏ó‡∏ô‡πÅ‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û BGR:
      1) ‡∏õ‡∏¥‡∏î‡∏ó‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏á (‡∏•‡∏î‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô)
      2) Blur ‡∏•‡∏î noise
      3) ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô HSV + ‡∏Ñ‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏î‡∏á 2 ‡∏ä‡πà‡∏ß‡∏á
      4) ‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î morphology ‡πÉ‡∏´‡πâ‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô
    """
    m = bgr.copy()
    if floor_y is not None and 0 <= floor_y < m.shape[0]: # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î floor_y ‚Üí ‡∏õ‡∏¥‡∏î‡∏ó‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏á
        m[floor_y:, :] = 0
    blur = cv2.GaussianBlur(m, (7,7), 0) # ‡πÄ‡∏ö‡∏•‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise
    hsv  = cv2.cvtColor(blur, cv2.COLOR_BGR2HSV) # BGR -> HSV
    m1 = cv2.inRange(hsv, np.array(HSV_LOWER1), np.array(HSV_UPPER1)) # mask ‡πÅ‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà 1
    m2 = cv2.inRange(hsv, np.array(HSV_LOWER2), np.array(HSV_UPPER2)) # mask ‡πÅ‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà 2
    mask = cv2.bitwise_or(m1, m2) # ‡∏£‡∏ß‡∏°‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á
    k = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5,5)) # kernel ‡∏ó‡∏£‡∏á‡∏ß‡∏á‡∏£‡∏µ
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN,  k, iterations=1) # ‡πÄ‡∏õ‡∏¥‡∏î = ‡∏•‡∏ö noise ‡πÄ‡∏•‡πá‡∏Å‡πÜ
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, k, iterations=1) # ‡∏õ‡∏¥‡∏î = ‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏π‡∏û‡∏£‡∏∏‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ
    return mask

def _largest_blob_bbox(binary, area_min=MIN_BLOB_AREA): # ‡∏´‡∏≤ bbox ‡∏Ç‡∏≠‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡πÅ‡∏î‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏õ‡πá‡∏ô fallback ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏à‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á)
    found = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = found[-2]
    if not cnts: return None
    c = max(cnts, key=cv2.contourArea)
    if cv2.contourArea(c) < area_min: return None
    x, y, w, h = cv2.boundingRect(c)
    return (x, y, x+w, y+h)

# ===================== Template-Matching Detector =====================
class RedTemplateDetector: # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ template matching
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡πÅ‡∏°‡∏ï‡∏ä‡πå
    def __init__(self, templates, scales=SCALES, score_thresh=SCORE_THRESH): # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î template, scales ‡πÅ‡∏•‡∏∞ score_thresh
        self.templates = [t.copy() for t in templates] # ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á template ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        self.coarse_scales = list(scales)              # << ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ scales ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô coarse_scales
        self.score_thresh = float(score_thresh)        # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        self.last_debug = {}                           # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Debug

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡∏†‡∏≤‡∏û BGR (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Coarse-to-Fine)
    def detect(self, bgr):
        bi = red_mask_binarize(bgr, floor_y=MASK_FLOOR_Y)
        method = _match_method_const()
        
        # === üöÄ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏´‡∏¢‡∏≤‡∏ö (Coarse Search) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ===
        best_coarse = (-1.0, None, None) # (score, scale, template)
        
        for tpl_base in self.templates:
            for s in self.coarse_scales:
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î template ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏Å‡∏•‡∏´‡∏¢‡∏≤‡∏ö
                tpl = tpl_base if abs(s-1.0) < 1e-6 else cv2.resize(tpl_base, None, fx=s, fy=s, interpolation=cv2.INTER_NEAREST)
                
                if bi.shape[0] < tpl.shape[0] or bi.shape[1] < tpl.shape[1]:
                    continue
                    
                res = cv2.matchTemplate(bi, tpl, method)
                _, score, _, _ = cv2.minMaxLoc(res)
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡∏´‡∏¢‡∏≤‡∏ö
                if score > best_coarse[0]:
                    best_coarse = (score, s, tpl_base)

        _, best_s_coarse, best_t_base = best_coarse
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if best_s_coarse is None:
            self.last_debug = {"ok": False, "score": -1.0, "scale": None, "method": MATCH_METHOD}
            return None, -1.0, self.last_debug

        # === üéØ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Fine Search) ‡∏£‡∏≠‡∏ö‡πÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ===
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≠‡∏ö‡πÜ ‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
        fine_scales = np.arange(best_s_coarse - 0.05, best_s_coarse + 0.06, 0.01)

        best_fine = (-1.0, None, None, None) # (score, bbox, tpl_used, scale)
        
        for s in fine_scales:
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î template ‡∏à‡∏≤‡∏Å template ‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            tpl = best_t_base if abs(s-1.0) < 1e-6 else cv2.resize(best_t_base, None, fx=s, fy=s, interpolation=cv2.INTER_NEAREST)
            
            if bi.shape[0] < tpl.shape[0] or bi.shape[1] < tpl.shape[1]:
                continue
                
            res = cv2.matchTemplate(bi, tpl, method)
            _, score, _, max_loc = cv2.minMaxLoc(res)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï best_fine ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ score ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            if score > best_fine[0]:
                h, w = tpl.shape
                bbox = (max_loc[0], max_loc[1], max_loc[0] + w, max_loc[1] + h)
                best_fine = (float(score), bbox, tpl, s)

        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        final_score, final_bbox, _, final_scale = best_fine
        
        ok = (final_bbox is not None) and (final_score >= self.score_thresh)
        self.last_debug = {"ok": ok, "score": final_score, "scale": final_scale, "method": MATCH_METHOD}
        
        if not ok:
            return None, final_score, self.last_debug
            
        return final_bbox, final_score, self.last_debug

    @staticmethod
    def draw_debug(frame, bbox, score, ema_pt, show_guides=True, label=""):
        """
        ‡∏ß‡∏≤‡∏î crosshair ‡∏Å‡∏•‡∏≤‡∏á‡∏†‡∏≤‡∏û + bbox + ‡∏à‡∏∏‡∏î EMA (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß) + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° debug
        """
        h, w = frame.shape[:2]
        cx, cy = int(w/2), int(h/2)
        if show_guides:
            cv2.drawMarker(frame, (cx, cy), (255, 255, 255), markerType=cv2.MARKER_CROSS, markerSize=20, thickness=2) # ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
        if bbox is not None:
            x1, y1, x2, y2 = map(int, bbox)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 255), 2) # ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏õ‡πâ‡∏≤ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)
            bb_cx, bb_cy = int(0.5*(x1+x2)), int(0.5*(y1+y2))
            cv2.circle(frame, (bb_cx, bb_cy), 4, (0, 255, 255), -1)    # ‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏≠‡∏ö
        if ema_pt is not None:
            ex, ey = map(int, ema_pt)
            cv2.circle(frame, (ex, ey), 4, (0, 255, 0), -1)            # ‡∏à‡∏∏‡∏î EMA (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)
        if label:
            cv2.putText(frame, label, (10, 26), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (200,255,200), 2)
        cv2.putText(frame, f"score={score:.2f}", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (200,255,200), 2)

# ===================== PID =====================
class PID:
    def __init__(self, kp, ki, kd, int_clamp=INT_CLAMP):
        self.kp, self.ki, self.kd = kp, ki, kd
        self.int = 0.0                 # ‡∏™‡∏∞‡∏™‡∏°‡∏≠‡∏¥‡∏ô‡∏ó‡∏¥‡∏Å‡∏£‡∏±‡∏•
        self.prev_e = 0.0              # error ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        self.prev_t = None             # ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        self.int_clamp = abs(int_clamp)# ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï anti-windup
        self.d_ema = 0.0               # ‡∏Ñ‡πà‡∏≤ derivative ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ EMA
        self.d_alpha = 0.5             # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å EMA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏û‡∏±‡∏ô‡∏ò‡πå

    def reset(self):                   # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ PID ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πâ‡∏≤ ‚Äú‡∏´‡∏≤‡∏¢‚Äù
        self.int = 0.0
        self.prev_e = 0.0
        self.prev_t = None
        self.d_ema = 0.0

    def step(self, e, t_now):
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì u = Kp*e + Ki*‚à´e dt + Kd*d(e)/dt (‡πÅ‡∏ï‡πà d(e)/dt ‡∏ú‡πà‡∏≤‡∏ô EMA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î noise)
        """
        if self.prev_t is None:        # ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å ‚Üí ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ dt ‡πÉ‡∏ä‡πâ P ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            self.prev_t = t_now
            self.prev_e = e
            return self.kp * e
        dt = max(1e-3, t_now - self.prev_t)  # ‡∏Å‡∏±‡∏ô dt == 0
        de = (e - self.prev_e) / dt
        self.d_ema = self.d_alpha * de + (1 - self.d_alpha) * self.d_ema  # derivative smoothing
        self.int += e * dt
        # anti-windup
        self.int = max(-self.int_clamp, min(self.int_clamp, self.int))
        # PID output
        u = self.kp * e + self.ki * self.int + self.kd * self.d_ema
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        self.prev_e = e
        self.prev_t = t_now
        return u

# ===================== Marker SDK glue =====================
class MarkerInfo:
    """
    ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• marker ‡∏à‡∏≤‡∏Å SDK (x,y,w,h ‚àà [0,1] ‡∏≠‡∏¥‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û), ‡∏û‡∏£‡πâ‡∏≠‡∏° helper ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    """
    def __init__(self, x, y, w, h, info):
        self._x, self._y, self._w, self._h, self._info = x, y, w, h, info
    @property
    def pt1(self):
        return int((self._x - self._w / 2) * 1280), int((self._y - self._h / 2) * 720)
    @property
    def pt2(self):
        return int((self._x + self._w / 2) * 1280), int((self._y + self._h / 2) * 720)
    @property
    def center(self):
        return int(self._x * 1280), int(self._y * 720)
    @property
    def text(self):
        return self._info

markers = []  # ‡πÄ‡∏Å‡πá‡∏ö marker ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å SDK

def on_detect_marker(marker_info):
    """
    callback ‡∏à‡∏≤‡∏Å ep_vision: ‡∏£‡∏±‡∏ö list ‡∏Ç‡∏≠‡∏á marker (x,y,w,h,info) ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô MarkerInfo
    """
    number = len(marker_info)
    markers.clear()
    for i in range(number):
        x, y, w, h, info = marker_info[i]
        markers.append(MarkerInfo(x, y, w, h, info))  # x,y,w,h ‚àà [0,1]

def sub_angle_cb(angle_info):
    """
    callback ‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•: pitch, yaw, pitch_ground, yaw_ground
    ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á global ‡πÄ‡∏û‡∏∑‡πà‡∏≠ log
    """
    gimbal_angles[:] = angle_info

def distant_by_cammara(px_x,px_y):
    Kx = 741.176
    Ky = 669.796
    zx = Kx*5.1/px_x
    zy = Ky*5.1/px_y
    z = (zx**2 + zy**2)**0.5
    return z

# ===================== Main =====================
if __name__ == "__main__":
    # ‡πÇ‡∏´‡∏•‡∏î template (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)
    _ALL_MASKS = _load_masks_from_paths(TEMPLATE_PATHS)
    detector = RedTemplateDetector(_ALL_MASKS) if len(_ALL_MASKS) > 0 else None

    ep = robot.Robot()
    ep.initialize(conn_type="ap")

    cam = ep.camera
    gim = ep.gimbal
    ep_vision = ep.vision      

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏° + subscribe callbacks
    cam.start_video_stream(display=False)                         # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å SDK)
    gim.sub_angle(freq=50, callback=sub_angle_cb)                 # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏ó‡∏µ‡πà 50Hz
    ep_vision.sub_detect_info(name="marker", callback=on_detect_marker) # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker ‡πÇ‡∏î‡∏¢ SDK
    gim.recenter(pitch_speed=200, yaw_speed=200).wait_for_completed()   # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á PID ‡∏™‡∏≠‡∏á‡πÅ‡∏Å‡∏ô
    pid_yaw = PID(KP_YAW, KI_YAW, KD_YAW)
    pid_pitch = PID(KP_PITCH, KI_PITCH, KD_PITCH)

    # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA ‡πÅ‡∏•‡∏∞ Debug
    ema_cx, ema_cy = CENTER_X, CENTER_Y
    latest_bbox = None
    latest_score = 0.0
    latest_src = "-"   # "marker" | "template" | "blob"

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° log CSV
    rows = []
    t0 = time.time()

    try:
        # ==================================
# ======     Main Loop         ======
# ==================================
        while True:
            t_now = time.time()
            frame = cam.read_cv2_image(strategy="newest", timeout=0.3)
            if frame is None:
                time.sleep(0.01)
                continue

            # 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤: ‡πÉ‡∏ä‡πâ Template Matching ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‚Üí Marker SDK
            cx, cy = None, None
            bbox = None
            score = 0.0
            src = "-"
            dist = 0.0 # << ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ dist ‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏∞‡∏¢‡∏∞

            # 1A) Primary: Template Matching (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å)
            if detector is not None:
                tbbox, tscore, _ = detector.detect(frame)
                if tbbox is not None:
                    x1, y1, x2, y2 = tbbox
                    cx, cy = 0.5*(x1+x2), 0.5*(y1+y2)
                    bbox = tbbox
                    score = float(tscore)
                    src = "template"
                    
                    # ==== ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ====
                    w_px = x2 - x1
                    h_px = y2 - y1
                    if w_px > 0 and h_px > 0:
                        dist = distant_by_cammara(w_px, h_px)

            # 1B) Fallback: Marker SDK
            if cx is None and len(markers) > 0:
                x_px, y_px = markers[-1].center
                w_px = markers[-1].pt2[0] - markers[-1].pt1[0]
                h_px = markers[-1].pt2[1] - markers[-1].pt1[1]
                cx, cy = x_px, y_px
                bbox = (x_px - w_px//2, y_px - h_px//2, x_px + w_px//2, y_px + h_px//2)
                score = 1.0
                src = "marker"
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Marker ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ)
                if w_px > 0 and h_px > 0:
                    dist = distant_by_cammara(w_px, h_px)
                    
            # 1C) Largest Red Blob (‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
            # ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ USE_BLOB_FALLBACK = False ...

            latest_bbox = bbox
            latest_score = score
            latest_src = src

            # 2) ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° PID ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô Gimbal
            if bbox is not None and cx is not None:
                if USE_EMA:
                    ema_cx = EMA_ALPHA * cx + (1 - EMA_ALPHA) * ema_cx
                    ema_cy = EMA_ALPHA * cy + (1 - EMA_ALPHA) * ema_cy
                    tgt_x, tgt_y = ema_cx, ema_cy
                else:
                    tgt_x, tgt_y = cx, cy

                err_x = (tgt_x - CENTER_X)
                err_y = (tgt_y - CENTER_Y)

                u_yaw   = SIGN_YAW   * pid_yaw.step(err_x, t_now)
                u_pitch = SIGN_PITCH * pid_pitch.step(err_y, t_now)

                u_yaw   = clamp(u_yaw,   -MAX_SPEED, MAX_SPEED)
                u_pitch = clamp(u_pitch, -MAX_SPEED, MAX_SPEED)

                gim.drive_speed(pitch_speed=u_pitch, yaw_speed=u_yaw)
                
                pa, ya, _, _ = gimbal_angles
                rows.append([t_now - t0, pa, ya, err_x, err_y, u_yaw, u_pitch, latest_score, latest_src])
            else:
                gim.drive_speed(pitch_speed=0, yaw_speed=0)
                pid_yaw.reset()
                pid_pitch.reset()

            # 3) ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Debug
            dbg = frame.copy()
            ema_pt = (ema_cx, ema_cy) if (bbox is not None and USE_EMA) else None
            
            # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
            RedTemplateDetector.draw_debug(dbg, latest_bbox, latest_score, ema_pt, True, f"SRC: {latest_src}")
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡πÑ‡∏´‡∏ô) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            if bbox is not None and dist > 0:
                dist_text = f"Distance: {dist:.2f} cm"
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÜ ‡∏Å‡∏±‡∏ö BBox
                text_pos = (int(bbox[0]), int(bbox[1]) - 10)
                cv2.putText(dbg, dist_text, text_pos, cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

            # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á Marker SDK ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Marker)
            if latest_src == "marker":
                for m in markers:
                    cv2.rectangle(dbg, m.pt1, m.pt2, (0, 255, 0), 2) # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏±‡∏ö
                    cv2.putText(dbg, str(m.text), m.center, cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 255, 0), 2)

            cv2.imshow("Template-First PID", dbg)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    finally:
        # ===== Cleanup & Save =====
        try:
            ep_vision.unsub_detect_info(name="marker") # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å sub marker
        except Exception:
            pass
        cv2.destroyAllWindows()
        try:
            cam.stop_video_stream()
        except Exception:
            pass
        gim.drive_speed(pitch_speed=0, yaw_speed=0)   # ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
        try:
            gim.unsub_angle()
        except Exception:
            pass
        ep.close()

        # Save CSV
        # out = Path("gimbal_response.csv")
        # try:
        #     with out.open('w', newline='') as f:
        #         w = csv.writer(f)
        #         w.writerow(["t","pitch_angle","yaw_angle","err_x_px","err_y_px","u_yaw_dps","u_pitch_dps","score","src"])
        #         w.writerows(rows)
        #     print(f"[LOG] Saved {len(rows)} samples ‚Üí {out.resolve()}")
        # except Exception as e:
        #     print(f"[WARN] CSV not saved: {e}")